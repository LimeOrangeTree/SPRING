*MVC패턴  Spring웹어플리케이션 프로젝트
1.주제선정 : 파일게시판
2.요구사항분석
  비회원은 게시글 조회가능
	로그인한 회원은 자신의 글을 입력,수정,삭제가능
  글을 입력하기위해서는 로그인을 해야한다(권한설정) 
3.데이터베이스 설계
	개념적모델링 => ER-Diagram
	논리적모델링 => 정규화
	물리적모델링 => 테이블(컬럼명, 제약조건, 기본값,..)
	
	
	
4.스토리보드작성
  (화면)흐름 ...
5.프로그램설계	 
  (MVC패턴) 요청설계

*약속
 요청시 확장자를 .do로 하자
 컨트롤러위치,뷰의위치,파일명,함수명등의 명명규칙, 구조...

 com.duri.controller >  MemberController.java 
 com.duri.service    >  MemberService.java
												FileBoardService.java
 com.duri.dao	       >  MemberDAO.java
                        FileBoardDAO.java 
 com.duri.sql        >  MemberSQL.xml
                        FileBoardSQL.xml
 com.duri.VO         >  FileBoardVO.java


5.프로그램설계	 
	http://localhost/uri/index.jsp

	1.목록보기
		요청		http://localhost/uri/fileboard/fileList.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 fileList()
		파라미터 nowPage= 현재 보고있는 페이지번호
		뷰			/WEB-INF/views/fileboard/fileList.jsp
		
	2.글입력
		2-1)글입력 폼 보여주기
		요청		http://localhost/uri/fileboard/writeForm.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 writeForm()
		파라미터  
		뷰			/WEB-INF/views/fileboard/writeForm.jsp

		2-2)글입력 처리
		요청		http://localhost/uri/fileboard/writeProc.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 writeProc()
		파라미터  
		뷰			/WEB-INF/views/fileboard/writeProc.jsp
					글목록보기 페이지로 이동

	3. 상세보기
	3-1) 조회수 증가  
	../fileboard/hitUp.do?oriNo=~~~&nowPage=1
		요청		http://localhost/uri/fileboard/hitUp.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 hitUp()
		파라미터 oriNo=
					nowPage= 현재 보고있는 페이지번호(릴레이용) 
		뷰			리다이렉트 상세보기
	3-2) 상세보기
		요청		http://localhost/uri/fileboard/boardDetail.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 boardDetail()
		파라미터 oriNo=
					nowPage= 현재 보고있는 페이지번호(릴레이용) 
		뷰			/WEB-INF/views/fileboard/boardDetail.jsp	
	
	4. 수정하기
	4-1) 폼보기
		요청		http://localhost/uri/fileboard/modifyForm.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 modifyForm()
		파라미터 oriNo=
					nowPage= 현재 보고있는 페이지번호(릴레이용) 
		뷰			/WEB-INF/views/fileboard/modifyForm.jsp
		
	4-2) 글수정하기
		요청		http://localhost/uri/fileboard/modifyProc.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 modifyProc()
		파라미터 oriNo=
					nowPage= 현재 보고있는 페이지번호(릴레이용)
					title=
					body=
					pw=
					첨부파일
		뷰			리다이렉트  상세보기
	//수정 - 수정처리
	@RequestMapping("/modifyProc")
	public  void  modifyProc(FileBoardVO vo) {
		//1.파라미터받기
		//2.비즈니스로직 
		//2-1.제목,내용,비번은 update
		//2-2.첨부파일은 있으면 등록(=>업로드)
		//	가.업로드된 파일은 삭제
		//		가-1)업로드된 파일정보를 db에서 알아내고
		//		가-2)해당파일을 File객체로 만들어서
		//		가-3)삭제
		
		//	나.db의 첨부파일 정보 삭제
		
		//3.모델
		//4.뷰 - 리다이렉트  상세보기
	}	
	
	
	5. 삭제하기
		요청		http://localhost/uri/fileboard/.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 ()
		파라미터  
		뷰			/WEB-INF/views/fileboard/	
	
	
	6. 검색하기
		요청		http://localhost/uri/fileboard/.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 ()
		파라미터  
		뷰			/WEB-INF/views/fileboard/


	7. 다운로드
		요청		http://localhost/uri/fileboard/fileDownload.do
		컨트롤러	com.duri.controller.FileController.java
		요청함수 fileDownload()
		파라미터 fileNo= 
		뷰			download 뷰
		
-------------------------------
*AOP(Aspect Orient Programming)
=> 관점지향 프로그래밍
   실제 비즈니스로직을 수행 도중에  
	 필요한 공통 모듈을
	 필요한 시점에
	 자동적으로 실행하는 기능

*AOP클래스 만드는법
- public 함수가 있어야 한다
->1.ProceedingJoinPoint를 파라미터객체로 받아야 한다
->2.리턴유형은 반드시 Object여야 한다 

public Object 함수명(ProceedingJoinPoint 변수){

}

--------------------------
*<!-- 공통기능으로 사용할 클래스를 DI로 사용하기위한 bean처리 -->
 <bean class="" id="">


*xml 파일에 AOP 기능 등록하기
	<aop:config>
		<aop:aspect id="measureAspect" 
		            ref="AOP로 사용할 클래스">
			<aop:pointcut id="publicMethod"
	 		★★★expression="execution(AOP 실행을 필요로 하는 함수 형태)" />
			<aop:around pointcut-ref="publicMethod" 
			            method="실행할 AOP 함수" />
		</aop:aspect>
	</aop:config>

--------------------------
	참고	pointcut 등록 요령
			(어떤 함수가 실행될 때 AOP 기능이 실행되도록 할 것인가를 등록하는 것이다.)

			execution(public void set*(..))
			==	public 이면서 반환값은 void이고 함수 이름은 set으로 시작하며
				매개변수는 없어도 되고 뭐가 와도 상관이 없다.
			
			execution(* qqq.spring.chap03.core.*.*())  //점 하나는 그 패키지안에 있는 것
			==>	접근지정자와 반환값은 상관이 없고
				다만 패키지가 qqq.spring.chap03.core 안에 있는 함수로
				매개변수는 없는 함수이다.

			execution(*.qqq.spring.chap03.core..*.*(..))  // 점이 2개있는 것은 그 하위안
			==>	접근지정자와 반환값은 상관이 없고
				다만 패키지가 qqq.spring.chap03.core와 그 하위 안에 있는 함수로
				매개변수는 없어도 되고 뭐가 와도 상관이 없다.

			execution(Integer qqq.spring.chap03.core.WriteArticleService.write(..))  //점2개짜리는
			==>	접근지정자는 없어야 하고
				반환값은 Integer 이어야 하며
			qqq.spring.chap03.core 패키지에 있는 WriteArticleService 클래스의 write 함수 중에서
				매개변수는 없어도 되고 뭐가 와도 상관이 없다.

			execution(* get*(*))  (//점1개는 반드시 있어야 한다)
			==>	접근지정자와 반환값은 상관이 없고
				함수 이름은 get으로 시작하며
				파라메터는 오직 한개만 와야 한다.

			execution(* get*(*, *))  //매개변수가 오직 2개와야하고
			==>	접근지정자와 반환값은 상관이 없고
				함수 이름은 get으로 시작하며
				파라메터는 오직 두개만 와야 한다.

			execution(* read*(Integer, ..))  (// 점2개짜리는 0개이상)
			==>	접근지정자와 반환값은 상관이 없고
				함수이름은 read로 시작하며
				첫번째 매개변수는 반드시 Integer이어야 하며 그 다음에는
				파라메터가 더 있어도 되고 없어도 된다.

=====================================
*인터셉터(Interceptor)
 => 컨트롤러가 특정작업을 진행하기 전에
    먼저 처리함으로써
		특정 권한이 부족한 경우의
		처리 방식을 다르게 하는  AOP의 변환된 형태

*순서
1. 인터셉터를 할 때 실행할 클래스를 만든다
		com.duri.util패키지생성 > LoginCheck.java
2. XML 환경설정파일에
   인터셉터 클래스를 등록하면서
	 인터셉터가 발생되는 설정한다
 <interceptors>
  <interceptor>
		<!--언제 인터셉터가 처리될지를 지정 -->
      <mapping path="/board/register"/>
      <mapping path="/board/modify"/>
      <mapping path="/board/delete"/>
		<!-- 사용할 인터셉터 클래스를 등록 -->
      <beans:bean class="com.duri.util.LoginCheck"/>
  </interceptor>
 </interceptors>

참고		인터셉터가 처리될지를 지정하는 부분에
	*		0개 이상의 문자
	?		1개 이상의 문자
	**	0개 이상의 폴더

참고   특정요처에 한해서는 인터셉터를 이용하지 않도록 지정할 수 있다
	<exclude-mapping path="인터셉터를 타지않는 요청내용">

	<interceptors>
  <interceptor>
		<mapping path="/board/*"/>
		<exclude-mapping path="/board/boardList"/>
		<beans:bean class="com.duri.util.LoginCheck"/>
  </interceptor>
 </interceptors>

=============================
*CLOB 데이터 처리
<resultMap id="id명" type="반환값형태">
 <!-- CLOB컬럼에 대해 선언  -->
 <result property="별칭명" column="컬럼명"
				 jdbcType="CLOB" javaType="java.lang.String"/>
</resultMap>


<select id="" resultMap="resultMapid명"> select질의문 </select>

-----------------------------------------
*스프링에서의 파일다운로드
1.스트림방식으로 다운로드를 하는 클래스를 만든다
2.다운로드 클래스를 xml파일에 <bean>처리
<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<property name="order" value="0"></property>
</bean>
<bean id="download" class="다운로드를 하는 클래스명"/>
3.컨트롤러에는 <bean> 처리된 클래스를
  ModelAndView클래스에 등록해준다

-------------------------------------
*myBatis에서 중복이되는 부분 등록 및 사용하기
 <sql id="적당한이름">
	중복되는 쿼리문
 </sql>

 <include refid="적당한이름" />




















